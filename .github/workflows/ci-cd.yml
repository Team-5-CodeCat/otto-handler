name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: otto_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm prisma generate

      - name: Run linting
        run: pnpm run lint

      - name: Run formatting check
        run: pnpm run format

      - name: Create test environment file
        run: |
          set -e  # Exit on error
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/otto_test" > .env.test
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env.test
          echo "REFRESH_TOKEN_SECRET=${{ secrets.REFRESH_TOKEN_SECRET }}" >> .env.test
          echo "PORT=4000" >> .env.test
          echo "NODE_ENV=test" >> .env.test

      - name: Run database migrations
        run: pnpm prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/otto_test

      - name: Run tests
        run: pnpm test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/otto_test

      - name: Build application
        run: pnpm build

      - name: Upload build artifacts
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: otto-handler-build
          path: |
            dist
            prisma
            package.json
            pnpm-lock.yaml
          retention-days: 7

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm prisma generate

      - name: Build application
        run: pnpm build

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_SSH_PORT }}
          script: |
            # Exit immediately if any command fails
            set -euo pipefail

            # Enable error reporting
            trap 'echo "Error occurred at line $LINENO with exit code $?"' ERR

            echo "Starting deployment..."

            # Ensure Node.js is available
            export NVM_DIR="$HOME/.nvm"
            if [ -s "$NVM_DIR/nvm.sh" ]; then
              . "$NVM_DIR/nvm.sh"
            fi
            if [ -s "$NVM_DIR/bash_completion" ]; then
              . "$NVM_DIR/bash_completion"
            fi

            # Add system paths
            export PATH="/usr/local/bin:/usr/bin:$PATH"

            # Verify Node.js is available
            if ! command -v node &> /dev/null; then
              echo "ERROR: Node.js is not installed!"
              exit 1
            fi
            echo "Node.js version: $(node --version)"

            # Fix permission issues
            echo "Fixing file permissions..."

            # Fix otto-handler directory permissions if needed
            if [ -d ~/otto-handler ]; then
              echo "Checking otto-handler directory permissions..."
              if [ ! -w ~/otto-handler ]; then
                echo "Fixing otto-handler directory permissions..."
                sudo chown -R $USER:$USER ~/otto-handler || {
                  echo "ERROR: Failed to fix otto-handler permissions"
                  exit 1
                }
              fi
            fi

            # Navigate to project directory
            cd ~/otto-handler || {
              echo "ERROR: Project directory ~/otto-handler does not exist"
              exit 1
            }

            # Pull latest changes
            echo "Pulling latest changes..."
            git pull origin main || {
              echo "ERROR: Git pull failed"
              exit 1
            }

            # Check and install pnpm if not exists
            if ! command -v pnpm &> /dev/null; then
              echo "pnpm not found, installing..."
              npm install -g pnpm || {
                echo "ERROR: Failed to install pnpm"
                exit 1
              }
            fi
            echo "pnpm version: $(pnpm --version)"

            # Check and install PM2 if not exists
            if ! command -v pm2 &> /dev/null; then
              echo "PM2 not found, installing..."
              npm install -g pm2 || {
                echo "ERROR: Failed to install PM2"
                exit 1
              }
            fi
            echo "PM2 version: $(pm2 --version)"

            # Install dependencies
            echo "Installing dependencies..."
            pnpm install --frozen-lockfile || {
              echo "ERROR: pnpm install failed"
              exit 1
            }

            # Generate Prisma client
            echo "Generating Prisma client..."
            pnpm prisma generate || {
              echo "ERROR: Failed to generate Prisma client"
              exit 1
            }

            # Create GitHub App Private Key file
            echo "Creating GitHub App Private Key file..."
            mkdir -p secrets
            echo "${{ secrets.OTTO_GITHUB_APP_PRIVATE_KEY }}" > secrets/otto_github_app_private_key.pem || {
              echo "ERROR: Failed to create private key file"
              exit 1
            }
            chmod 600 secrets/otto_github_app_private_key.pem

            # Create .env.prod file
            echo "Creating .env.prod..."
            {
              echo "PORT=${{ secrets.PORT }}"
              echo "NODE_ENV=production"
              echo "COOKIE_SECRET=${{ secrets.COOKIE_SECRET }}"
              echo "DATABASE_URL=${{ secrets.DATABASE_URL }}"
              echo "REDIS_URL=${{ secrets.REDIS_URL }}"
              echo "OTTO_GITHUB_APP_ID=${{ secrets.OTTO_GITHUB_APP_ID }}"
              echo "OTTO_GITHUB_PRIVATE_KEY_PATH=secrets/otto_github_app_private_key.pem"
              echo "JWT_SECRET=${{ secrets.JWT_SECRET }}"
              echo "FRONTEND_URL=${{ secrets.FRONTEND_URL }}"
            } > .env.prod || {
              echo "ERROR: Failed to create .env.prod"
              exit 1
            }

            echo ".env.prod created successfully"

            # Run database migrations
            echo "Running database migrations..."
            DATABASE_URL="${{ secrets.DATABASE_URL }}" pnpm prisma migrate deploy || {
              echo "WARNING: Database migration failed. This might be expected if database is already up to date."
            }

            # Build the application
            echo "Building application..."
            pnpm build || {
              echo "ERROR: Build failed"
              exit 1
            }

            # Deploy with PM2 (minimal downtime)
            echo "Deploying application with PM2..."

            # Check if process exists
            if pm2 show otto-handler &>/dev/null; then
              echo "Existing process found, performing reload..."
              # Reload for minimal downtime
              pm2 reload otto-handler --update-env || {
                echo "Reload failed, trying restart..."
                pm2 restart otto-handler || {
                  echo "Restart failed, starting fresh..."
                  pm2 delete otto-handler
                  pm2 start pnpm --name "otto-handler" -- run start:prod:env || {
                    echo "ERROR: Failed to start application with PM2"
                    exit 1
                  }
                }
              }
            else
              echo "No existing process found, starting application..."
              # First time deployment
              pm2 start pnpm --name "otto-handler" -- run start:prod:env || {
                echo "ERROR: Failed to start application with PM2"
                exit 1
              }
            fi

            # Save PM2 process list
            echo "Saving PM2 process list..."
            pm2 save || {
              echo "ERROR: Failed to save PM2 process list"
              exit 1
            }

            # Verify the app is running
            sleep 3
            if ! pm2 show otto-handler | grep -q "online"; then
              echo "ERROR: Application is not running!"
              pm2 logs otto-handler --lines 50
              exit 1
            fi

            echo "Deployment completed successfully!"
            pm2 status
