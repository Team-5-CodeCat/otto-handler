generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  email         String               @unique @map("email")
  password      String?              @map("password")
  name          String               @map("name")
  memberRole    MemberRole           @default(MEMBER) @map("member_role")
  createdAt     DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime             @updatedAt @map("updated_at") @db.Timestamptz(6)
  userID        String               @id @default(uuid()) @map("user_id") @db.Uuid
  installations GithubInstallation[]
  projects      Project[]
  refreshTokens RefreshToken[]

  @@index([createdAt])
  @@map("users")
}

model RefreshToken {
  tokenId    String   @id @default(uuid()) @map("token_id") @db.Uuid
  userID     String   @map("user_id") @db.Uuid
  token      String   @unique @map("token")
  expiresAt  DateTime @map("expires_at") @db.Timestamptz(6)
  lastUsedAt DateTime @default(now()) @map("last_used_at") @db.Timestamptz(6)
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  user       User     @relation(fields: [userID], references: [userID], onDelete: Cascade)

  @@index([userID])
  @@index([expiresAt])
  @@index([createdAt])
  @@map("refresh_tokens")
}

model GithubInstallation {
  id                  String               @id @default(uuid()) @map("id") @db.Uuid
  userID              String               @map("user_id") @db.Uuid
  installationId      String               @unique @map("installation_id")
  accountLogin        String?              @map("account_login")
  accountId           String?              @map("account_id")
  accessToken         String?              @map("access_token")
  tokenExpiresAt      DateTime?            @map("token_expires_at") @db.Timestamptz(6)
  lastIssuedAt        DateTime?            @map("last_issued_at") @db.Timestamptz(6)
  lastUsedAt          DateTime?            @map("last_used_at") @db.Timestamptz(6)
  createdAt           DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime             @updatedAt @map("updated_at") @db.Timestamptz(6)
  accountType         GithubAccountType?   @map("account_type")
  repositorySelection RepositorySelection? @default(selected) @map("repository_selection")
  user                User                 @relation(fields: [userID], references: [userID], onDelete: Cascade)

  @@index([userID])
  @@index([accountLogin])
  @@index([accountId])
  @@index([accountType])
  @@map("github_installations")
}

model Project {
  name         String              @map("name")
  webhookUrl   String?             @unique @map("webhook_url")
  createdAt    DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime            @updatedAt @map("updated_at") @db.Timestamptz(6)
  projectID    String              @id @default(uuid()) @map("project_id") @db.Uuid
  userID       String              @map("user_id") @db.Uuid
  environments Environment[]
  pipelines    Pipeline[]
  repositories ProjectRepository[]
  user         User                @relation(fields: [userID], references: [userID], onDelete: Cascade)

  @@unique([userID, name])
  @@index([userID])
  @@index([createdAt])
  @@map("projects")
}

model ProjectRepository {
  id             String   @id @default(uuid()) @map("id") @db.Uuid
  projectID      String   @map("project_id") @db.Uuid
  repoFullName   String   @map("repo_full_name")
  selectedBranch String   @map("selected_branch")
  installationId String?  @map("installation_id")
  isActive       Boolean  @default(true) @map("is_active")
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  project        Project  @relation(fields: [projectID], references: [projectID], onDelete: Cascade)

  @@unique([projectID, repoFullName])
  @@index([projectID])
  @@index([installationId])
  @@map("project_repositories")
}

model Environment {
  language         Language          @map("language")
  deployEnv        DeployEnvironment @map("deploy_environment")
  envVariables     Json?             @map("env_variables")
  credentials      Json?             @map("credentials")
  createdAt        DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime          @updatedAt @map("updated_at") @db.Timestamptz(6)
  deploymentPath   String?           @map("deployment_path")
  deploymentTarget String?           @map("deployment_target")
  servicePort      Int?              @map("service_port")
  environmentID    String            @id @default(uuid()) @map("environment_id") @db.Uuid
  projectID        String            @map("project_id") @db.Uuid
  project          Project           @relation(fields: [projectID], references: [projectID], onDelete: Cascade)

  @@index([projectID])
  @@index([createdAt])
  @@map("environments")
}

model Pipeline {
  name           String        @map("name")
  createdAt      DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime      @updatedAt @map("updated_at") @db.Timestamptz(6)
  active         Boolean       @default(true) @map("active")
  owner          String?       @map("owner")
  pipelineSpec   Json          @map("pipeline_spec")
  version        Int           @default(1) @map("version")
  pipelineID     String        @id @default(uuid()) @map("pipeline_id") @db.Uuid
  projectID      String        @map("project_id") @db.Uuid
  normalizedSpec Json?         @map("normalized_spec")
  originalSpec   String?       @map("original_spec")
  specHash       String?       @map("spec_hash") @db.VarChar(64)
  runs           PipelineRun[]
  project        Project       @relation(fields: [projectID], references: [projectID], onDelete: Cascade)

  @@unique([projectID, name, version])
  @@index([owner])
  @@index([projectID])
  @@index([createdAt])
  @@index([specHash])
  @@map("pipelines")
}

model PipelineRun {
  id              String    @id @default(uuid()) @map("id") @db.Uuid
  pipelineID      String    @map("pipeline_id") @db.Uuid
  pipelineVersion Int       @map("pipeline_version")
  status          JobStatus @map("status")
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  queuedAt        DateTime? @map("queued_at") @db.Timestamptz(6)
  startedAt       DateTime? @map("started_at") @db.Timestamptz(6)
  finishedAt      DateTime? @map("finished_at") @db.Timestamptz(6)
  exitCode        Int?      @map("exit_code")
  owner           String?   @map("owner")
  agent           String?   @map("agent")
  containerImage  String?   @map("container_image")
  trigger         String?   @map("trigger")
  labels          Json?     @map("labels")
  metadata        Json?     @map("metadata")
  externalRunKey  String?   @unique @map("external_run_key")
  idempotencyKey  String?   @unique @map("idempotency_key")
  jobs            Job[]
  pipeline        Pipeline  @relation(fields: [pipelineID], references: [pipelineID])

  @@index([pipelineID, createdAt])
  @@index([status, createdAt])
  @@index([createdAt])
  @@map("pipeline_runs")
}

model Job {
  runID          String           @map("run_id") @db.Uuid
  name           String           @map("name")
  type           JobType          @map("type")
  testType       TestType?        @map("test_type")
  status         JobStatus        @map("status")
  attemptCurrent Int              @default(0) @map("attempt_current")
  attemptMax     Int              @default(3) @map("attempt_max")
  exitCode       Int?             @map("exit_code")
  envVariables   Json?            @map("env_variables")
  s3ArtifactUrl  String?          @map("s3_artifact_url")
  targetUrl      String?          @map("target_url")
  createdAt      DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  queuedAt       DateTime?        @map("queued_at") @db.Timestamptz(6)
  startedAt      DateTime?        @map("started_at") @db.Timestamptz(6)
  finishedAt     DateTime?        @map("finished_at") @db.Timestamptz(6)
  owner          String?          @map("owner")
  agent          String?          @map("agent")
  containerImage String?          @map("container_image")
  command        String?          @map("command")
  inputs         Json?            @map("inputs")
  outputs        Json?            @map("outputs")
  externalJobKey String?          @unique @map("external_job_key")
  id             String           @id @default(uuid()) @map("id") @db.Uuid
  errors         JobError[]
  statusEvents   JobStatusEvent[]
  run            PipelineRun      @relation(fields: [runID], references: [id], onDelete: Cascade)
  logs           Log[]

  @@unique([runID, name])
  @@index([runID, createdAt])
  @@index([status, createdAt])
  @@index([type, createdAt])
  @@index([agent])
  @@index([createdAt])
  @@map("jobs")
}

model JobStatusEvent {
  id         String     @id @default(uuid()) @map("id") @db.Uuid
  fromStatus JobStatus? @map("from_status")
  toStatus   JobStatus  @map("to_status")
  reason     String?    @map("reason")
  data       Json?      @map("data")
  at         DateTime   @default(now()) @map("at") @db.Timestamptz(6)
  jobID      String     @map("job_id") @db.Uuid
  job        Job        @relation(fields: [jobID], references: [id], onDelete: Cascade)

  @@index([jobID, at])
  @@map("job_status_events")
}

model JobError {
  id         String   @id @default(uuid()) @map("id") @db.Uuid
  attemptNo  Int      @map("attempt_no")
  occurredAt DateTime @default(now()) @map("occurred_at") @db.Timestamptz(6)
  errorType  String?  @map("error_type")
  message    String?  @map("message") @db.VarChar(4096)
  stacktrace String?  @map("stacktrace") @db.VarChar(8192)
  context    Json?    @map("context")
  dedupeKey  String?  @map("dedupe_key")
  jobID      String   @map("job_id") @db.Uuid
  job        Job      @relation(fields: [jobID], references: [id], onDelete: Cascade)

  @@unique([jobID, dedupeKey])
  @@index([jobID, attemptNo])
  @@index([occurredAt])
  @@index([errorType])
  @@map("job_errors")
}

model Log {
  content       String?   @map("content")
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  attemptNo     Int       @map("attempt_no")
  contentType   String?   @map("content_type")
  sizeBytes     BigInt?   @map("size_bytes")
  storageBucket String?   @map("storage_bucket")
  storageKey    String?   @map("storage_key")
  stream        LogStream @map("stream")
  logID         String    @id @default(uuid()) @map("log_id") @db.Uuid
  jobID         String    @map("job_id") @db.Uuid
  job           Job       @relation(fields: [jobID], references: [id], onDelete: Cascade)

  @@unique([jobID, attemptNo, stream])
  @@index([jobID, attemptNo])
  @@index([createdAt])
  @@map("logs")
}

model Outbox {
  id          BigInt    @id @default(autoincrement()) @map("id")
  eventType   String    @map("event_type")
  payload     Json      @map("payload")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  publishedAt DateTime? @map("published_at") @db.Timestamptz(6)
  attempts    Int       @default(0) @map("attempts")

  @@index([createdAt])
  @@index([publishedAt])
  @@map("outbox")
}

enum MemberRole {
  ADMIN
  MEMBER
  VIEWER
}

enum Language {
  NODE
  PYTHON
}

enum DeployEnvironment {
  EC2
}

enum JobType {
  BUILD
  TEST
  DEPLOYMENT
}

enum JobStatus {
  pending
  running
  completed
  failed
  cancelled
}

enum LogStream {
  stdout
  stderr
}

enum TestType {
  UNIT
  E2E
}

enum GithubAccountType {
  User
  Organization
}

enum RepositorySelection {
  selected
  all
}
