// ---------------------------------------------
// Database: PostgreSQL
// 주요 기능: 사용자 인증, GitHub 연동, 프로젝트/환경/파이프라인/실행/작업/로그 관리, Outbox 발행
// 설계 원칙 (2025-09-04 갱신):
//   - 모든 ID는 UUID(v4) 사용 (단순성/호환성)
//   - 시간 순 정렬은 created_at + 인덱스로 처리 (DESC 인덱스는 Raw SQL로만 필요 시 추가)
//   - 파이프라인 스펙: 원본(original)·정규화(normalized)·해시(specHash=canonical JSON → SHA-256) 모두 보관
//   - Outbox + IdempotencyKey로 발행 신뢰성/멱등성 확보
//   - FK 타입은 모두 일관되게 @db.Uuid
//   - Logs 테이블은 포인터 1행 정책(대용량 본문은 외부 스토리지/스트리밍)
//   - 프로젝트 이름은 같은 사용자(userID) 내에서 유일(@@unique([userID, name]))
//   - OAuth(GitHub) 계정은 password 필드 NULL 허용(User.password: String?)
// ---------------------------------------------

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // .env 파일의 DB 연결 문자열 사용
}

// -----------------------------
// Enums: 역할, 언어, 환경, Job/Log 상태 정의
// -----------------------------

// RBAC: 사용자 역할
enum MemberRole {
  ADMIN
  MEMBER
  VIEWER
}

// 지원 언어
enum Language {
  NODE
  PYTHON
}

// MVP 배포 환경
enum DeployEnvironment {
  EC2
}

// 작업 타입
enum JobType {
  BUILD
  TEST
  DEPLOYMENT
}

// 작업 상태 라이프사이클
enum JobStatus {
  pending
  running
  completed
  failed
  cancelled
}

// 로그 스트림
enum LogStream {
  stdout
  stderr
}

// 테스트 세분화
enum TestType {
  UNIT
  E2E
}

// -----------------------------
// Models
// -----------------------------

model User {
  userID     String     @id @default(uuid()) @map("user_id") @db.Uuid // UUID 기본키
  email      String     @unique @map("email") // 로그인 식별자
  password   String?    @map("password") // bcrypt 해시 저장, GitHub 계정은 NULL 허용
  name       String     @map("name") // 표시 이름
  memberRole MemberRole @default(MEMBER) @map("member_role") // 역할
  createdAt  DateTime   @default(now()) @map("created_at") @db.Timestamptz(6) // 생성일
  updatedAt  DateTime   @updatedAt @map("updated_at") @db.Timestamptz(6) // 수정일

  // Relations
  projects      Project[]
  github        Github?
  refreshTokens RefreshToken[]

  @@index([createdAt]) // 최근 사용자 조회
  @@map("users")
}

model RefreshToken {
  tokenId    String   @id @default(uuid()) @map("token_id") @db.Uuid
  userID     String   @map("user_id") @db.Uuid
  token      String   @unique @map("token") // 리프레시 토큰 값
  expiresAt  DateTime @map("expires_at") @db.Timestamptz(6)
  lastUsedAt DateTime @default(now()) @map("last_used_at") @db.Timestamptz(6)
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  user User @relation(fields: [userID], references: [userID], onDelete: Cascade)

  @@index([userID])
  @@index([expiresAt])
  @@index([createdAt])
  @@map("refresh_tokens")
}

model Github {
  userID      String  @id @map("user_id") @db.Uuid
  githubID    String  @unique @map("github_id") // GitHub 계정 고유 ID
  accessToken String? @map("access_token") // 선택적 토큰

  user User @relation(fields: [userID], references: [userID], onDelete: Cascade)

  @@map("github")
}

model Project {
  projectID  String   @id @default(uuid()) @map("project_id") @db.Uuid // 프로젝트 ID (UUID)
  userID     String   @map("user_id") @db.Uuid // 소유 사용자 ID (FK)
  name       String   @map("name") // 프로젝트명 (사용자별 유일)
  webhookUrl String?  @unique @map("webhook_url") // GitHub webhook (전역 유일, NULL 허용)
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6) // 생성 시각
  updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamptz(6) // 수정 시각

  // Relations
  user         User          @relation(fields: [userID], references: [userID], onDelete: Cascade) // 사용자 삭제 시 연쇄 삭제
  pipelines    Pipeline[] // 프로젝트에 속한 파이프라인들
  environments Environment[] // 프로젝트 환경들

  @@unique([userID, name]) // 같은 사용자 내 동일 이름 금지(GitHub 리포지토리 네이밍과 유사 규칙)
  @@index([userID]) // 사용자별 프로젝트 조회 최적화
  @@index([createdAt]) // 최신순 정렬/조회 최적화
  @@map("projects")
}

model Environment {
  environmentID    String            @id @default(uuid()) @map("environment_id") @db.Uuid
  projectID        String            @map("project_id") @db.Uuid
  language         Language          @map("language")
  deployEnv        DeployEnvironment @map("deploy_environment")
  envVariables     Json?             @map("env_variables")
  credentials      Json?             @map("credentials")
  deploymentTarget String?           @map("deployment_target")
  deploymentPath   String?           @map("deployment_path")
  servicePort      Int?              @map("service_port")
  createdAt        DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime          @updatedAt @map("updated_at") @db.Timestamptz(6)

  project Project @relation(fields: [projectID], references: [projectID], onDelete: Cascade)

  @@index([projectID])
  @@index([createdAt])
  @@map("environments")
}

model Pipeline {
  pipelineID     String   @id @default(uuid()) @map("pipeline_id") @db.Uuid
  projectID      String   @map("project_id") @db.Uuid
  name           String   @map("name")
  version        Int      @default(1) @map("version") // 버전 관리
  active         Boolean  @default(true) @map("active")
  owner          String?  @map("owner")
  pipelineSpec   Json     @map("pipeline_spec") // 원본 pipeline JSON
  isBlockBased   Boolean  @default(false) @map("is_block_based")
  originalSpec   String?  @map("original_spec") @db.Text // 원본 YAML/JSON 저장
  normalizedSpec Json?    @map("normalized_spec") // 정규화된 JSON
  specHash       String?  @map("spec_hash") @db.VarChar(64) // SHA-256 해시
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  project Project       @relation(fields: [projectID], references: [projectID], onDelete: Cascade)
  runs    PipelineRun[]

  @@unique([projectID, name, version])
  @@index([owner])
  @@index([projectID])
  @@index([specHash])
  @@index([createdAt])
  @@map("pipelines")
}

model PipelineRun {
  id              String    @id @default(uuid()) @map("id") @db.Uuid
  pipelineID      String    @map("pipeline_id") @db.Uuid
  pipelineVersion Int       @map("pipeline_version")
  status          JobStatus @map("status")
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  queuedAt        DateTime? @map("queued_at") @db.Timestamptz(6)
  startedAt       DateTime? @map("started_at") @db.Timestamptz(6)
  finishedAt      DateTime? @map("finished_at") @db.Timestamptz(6)
  exitCode        Int?      @map("exit_code")
  owner           String?   @map("owner")
  agent           String?   @map("agent")
  containerImage  String?   @map("container_image")
  trigger         String?   @map("trigger")
  labels          Json?     @map("labels")
  metadata        Json?     @map("metadata")
  externalRunKey  String?   @unique @map("external_run_key")
  idempotencyKey  String?   @unique @map("idempotency_key") // 멱등성 보장

  pipeline Pipeline @relation(fields: [pipelineID], references: [pipelineID], onDelete: Restrict)
  jobs     Job[]

  @@index([pipelineID, createdAt])
  @@index([status, createdAt])
  @@index([createdAt])
  @@map("pipeline_runs")
}

model Job {
  id             String    @id @default(uuid()) @map("id") @db.Uuid
  runID          String    @map("run_id") @db.Uuid
  name           String    @map("name")
  type           JobType   @map("type")
  testType       TestType? @map("test_type")
  status         JobStatus @map("status")
  attemptCurrent Int       @default(0) @map("attempt_current")
  attemptMax     Int       @default(3) @map("attempt_max")
  exitCode       Int?      @map("exit_code")
  envVariables   Json?     @map("env_variables")
  s3ArtifactUrl  String?   @map("s3_artifact_url")
  targetUrl      String?   @map("target_url")
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  queuedAt       DateTime? @map("queued_at") @db.Timestamptz(6)
  startedAt      DateTime? @map("started_at") @db.Timestamptz(6)
  finishedAt     DateTime? @map("finished_at") @db.Timestamptz(6)
  owner          String?   @map("owner")
  agent          String?   @map("agent")
  containerImage String?   @map("container_image")
  command        String?   @map("command")
  inputs         Json?     @map("inputs")
  outputs        Json?     @map("outputs")
  externalJobKey String?   @unique @map("external_job_key")

  run          PipelineRun      @relation(fields: [runID], references: [id], onDelete: Cascade)
  statusEvents JobStatusEvent[]
  errors       JobError[]
  logs         Log[]

  @@unique([runID, name])
  @@index([runID, createdAt])
  @@index([status, createdAt])
  @@index([type, createdAt])
  @@index([agent])
  @@index([createdAt])
  @@map("jobs")
}

model JobStatusEvent {
  id         String     @id @default(uuid()) @map("id") @db.Uuid
  jobID      String     @map("job_id") @db.Uuid
  fromStatus JobStatus? @map("from_status")
  toStatus   JobStatus  @map("to_status")
  reason     String?    @map("reason")
  data       Json?      @map("data")
  at         DateTime   @default(now()) @map("at") @db.Timestamptz(6)

  job Job @relation(fields: [jobID], references: [id], onDelete: Cascade)

  @@index([jobID, at])
  @@map("job_status_events")
}

model JobError {
  id         String   @id @default(uuid()) @map("id") @db.Uuid
  jobID      String   @map("job_id") @db.Uuid
  attemptNo  Int      @map("attempt_no")
  occurredAt DateTime @default(now()) @map("occurred_at") @db.Timestamptz(6)
  errorType  String?  @map("error_type")
  message    String?  @map("message") @db.VarChar(4096)
  stacktrace String?  @map("stacktrace") @db.VarChar(8192)
  context    Json?    @map("context")
  dedupeKey  String?  @map("dedupe_key")

  job Job @relation(fields: [jobID], references: [id], onDelete: Cascade)

  @@unique([jobID, dedupeKey]) // Job별 오류 중복 제거
  @@index([jobID, attemptNo])
  @@index([occurredAt])
  @@index([errorType])
  @@map("job_errors")
}

model Log {
  logID         String    @id @default(uuid()) @map("log_id") @db.Uuid
  jobID         String    @map("job_id") @db.Uuid
  attemptNo     Int       @map("attempt_no")
  stream        LogStream @map("stream")
  content       String?   @map("content") // 짧은 로그만 저장
  storageBucket String?   @map("storage_bucket") // S3 버킷
  storageKey    String?   @map("storage_key") // S3 키
  sizeBytes     BigInt?   @map("size_bytes") @db.BigInt
  contentType   String?   @map("content_type")
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)

  job Job @relation(fields: [jobID], references: [id], onDelete: Cascade)

  @@unique([jobID, attemptNo, stream]) // Job/시도/스트림별 1행만
  @@index([jobID, attemptNo])
  @@index([createdAt])
  @@map("logs")
}

model Outbox {
  id          BigInt    @id @default(autoincrement()) @map("id")
  eventType   String    @map("event_type") // 이벤트 타입
  payload     Json      @map("payload") // 이벤트 본문
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  publishedAt DateTime? @map("published_at") @db.Timestamptz(6) // 발행 시각
  attempts    Int       @default(0) @map("attempts") // 재시도 횟수

  @@index([publishedAt])
  @@index([createdAt])
  @@map("outbox")
}
