generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MemberRole {
  ADMIN
  MEMBER
  VIEWER
}

enum Language {
  NODE
  PYTHON
  JAVA
}

enum DeployEnvironment {
  EC2
  DOCKER
}

enum RetryStatus {
  PENDING
  SUCCESS
  FAILED
  CIRCUIT_BREAKER
}

enum LogType {
  BUILD
  TEST
  DEPLOYMENT
}

model User {
  userID     Int        @id @default(autoincrement()) @map("user_id")
  email      String     @unique @map("email")
  password   String     @map("password")
  name       String     @map("name")
  memberRole MemberRole @default(MEMBER) @map("member_role")
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")

  // Relations
  projects      Project[]
  github        Github?
  refreshTokens RefreshToken[]

  @@map("users")
}

model RefreshToken {
  tokenId    Int      @id @default(autoincrement()) @map("token_id")
  userID     Int      @map("user_id")
  token      String   @unique @map("token")
  expiresAt  DateTime @map("expires_at")
  lastUsedAt DateTime @default(now()) @map("last_used_at")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userID], references: [userID], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Github {
  userID      Int     @id @map("user_id")
  githubID    String  @unique @map("github_id")
  accessToken String? @map("access_token")

  // Relations
  user User @relation(fields: [userID], references: [userID], onDelete: Cascade)

  @@map("github")
}

model Project {
  projectID  Int      @id @default(autoincrement()) @map("project_id")
  userID     Int      @map("user_id")
  name       String   @map("name")
  webhookUrl String?  @unique @map("webhook_url")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relations
  user         User          @relation(fields: [userID], references: [userID], onDelete: Cascade)
  pipelines    Pipeline[]
  environments Environment[]

  @@map("projects")
}

model Environment {
  environmentID Int               @id @default(autoincrement()) @map("environment_id")
  projectID     Int               @map("project_id")
  language      Language          @map("language")
  deployEnv     DeployEnvironment @map("deploy_environment")
  envVariables  Json?             @map("env_variables")
  credentials   Json?             @map("credentials")
  createdAt     DateTime          @default(now()) @map("created_at")
  updatedAt     DateTime          @updatedAt @map("updated_at")

  // Relations
  project Project @relation(fields: [projectID], references: [projectID], onDelete: Cascade)

  @@map("environments")
}

model Pipeline {
  pipelineID   Int      @id @default(autoincrement()) @map("pipeline_id")
  projectID    Int      @map("project_id")
  name         String   @map("name")
  config       Json     @map("config")
  isBlockBased Boolean  @default(false) @map("is_block_based")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  project     Project      @relation(fields: [projectID], references: [projectID], onDelete: Cascade)
  builds      Build[]
  tests       Test[]
  deployments Deployment[]

  @@map("pipelines")
}

model Build {
  buildID       Int          @id @default(autoincrement()) @map("build_id")
  pipelineID    Int          @map("pipeline_id")
  status        String       @map("status")
  retryCount    Int          @default(0) @map("retry_count")
  retryStatus   RetryStatus? @map("retry_status")
  s3ArtifactUrl String?      @map("s3_artifact_url")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")

  // Relations
  pipeline Pipeline @relation(fields: [pipelineID], references: [pipelineID], onDelete: Cascade)
  logs     Log[]    @relation("BuildLogs")

  @@map("builds")
}

model Test {
  testID      Int          @id @default(autoincrement()) @map("test_id")
  pipelineID  Int          @map("pipeline_id")
  type        String       @map("type")
  status      String       @map("status")
  retryCount  Int          @default(0) @map("retry_count")
  retryStatus RetryStatus? @map("retry_status")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")

  // Relations
  pipeline Pipeline @relation(fields: [pipelineID], references: [pipelineID], onDelete: Cascade)
  logs     Log[]    @relation("TestLogs")

  @@map("tests")
}

model Deployment {
  deploymentID Int          @id @default(autoincrement()) @map("deployment_id")
  pipelineID   Int          @map("pipeline_id")
  status       String       @map("status")
  retryCount   Int          @default(0) @map("retry_count")
  retryStatus  RetryStatus? @map("retry_status")
  targetUrl    String?      @map("target_url")
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")

  // Relations
  pipeline Pipeline @relation(fields: [pipelineID], references: [pipelineID], onDelete: Cascade)
  logs     Log[]    @relation("DeploymentLogs")

  @@map("deployments")
}

model Log {
  logID     Int      @id @default(autoincrement()) @map("log_id")
  type      LogType  @map("type") // BUILD, TEST, DEPLOYMENT
  content   String   @map("content")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  build        Build?      @relation("BuildLogs", fields: [buildID], references: [buildID], onDelete: Cascade)
  test         Test?       @relation("TestLogs", fields: [testID], references: [testID], onDelete: Cascade)
  deployment   Deployment? @relation("DeploymentLogs", fields: [deploymentID], references: [deploymentID], onDelete: Cascade)
  buildID      Int?        @map("build_id")
  testID       Int?        @map("test_id")
  deploymentID Int?        @map("deployment_id")

  @@map("logs")
}
