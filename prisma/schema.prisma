generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRESQL_URL")
}

model User {
  email             String               @unique
  name              String?
  avatarUrl         String?
  createdAt         DateTime             @default(now())
  githubId          String               @unique
  githubNodeId      String?
  githubUsername    String               @unique
  isActive          Boolean              @default(true)
  lastLoginAt       DateTime?
  updatedAt         DateTime             @updatedAt
  userId            String               @id @default(uuid())
  installations     GithubInstallation[]
  pipelineTemplates PipelineTemplate[]   @relation("TemplateCreator")
  projects          Project[]
  sessions          Session[]
  sharedTemplates   PipelineTemplate[]   @relation("SharedTemplates")

  @@index([githubId])
  @@index([githubUsername])
  @@map("users")
}

model Session {
  sessionToken   String    @unique
  accessToken    String?
  tokenExpiresAt DateTime?
  userAgent      String?
  ipAddress      String?
  expiresAt      DateTime
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  userId         String
  sessionId      String    @id @default(uuid())
  user           User      @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([sessionToken])
  @@index([userId])
  @@map("sessions")
}

model GithubInstallation {
  createdAt            DateTime  @default(now())
  installationId       String    @id @default(uuid())
  isActive             Boolean   @default(true)
  updatedAt            DateTime  @updatedAt
  userId               String
  accountId            String
  accountLogin         String
  accountType          String
  githubInstallationId String    @unique
  user                 User      @relation(fields: [userId], references: [userId], onDelete: Cascade)
  projects             Project[]

  @@index([githubInstallationId])
  @@index([userId])
  @@map("github_installations")
}

model Project {
  name           String
  createdAt      DateTime            @default(now())
  description    String?
  githubOwner    String
  githubRepoId   String              @unique
  githubRepoName String
  githubRepoUrl  String
  installationId String?
  isActive       Boolean             @default(true)
  isPrivate      Boolean             @default(true)
  updatedAt      DateTime            @updatedAt
  userId         String
  projectId      String              @id @default(uuid())
  selectedBranch String              @default("main")
  pipelines      Pipeline[]
  secrets        ProjectSecret[]
  installation   GithubInstallation? @relation(fields: [installationId], references: [installationId])
  user           User                @relation(fields: [userId], references: [userId], onDelete: Cascade)
  pushEvents     PushEvent[]

  @@unique([githubOwner, githubRepoName])
  @@unique([userId, githubRepoId])
  @@index([userId])
  @@index([installationId])
  @@map("projects")
}

model ProjectSecret {
  key       String
  value     String
  isSecure  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectId String
  secretId  String   @id @default(uuid())
  project   Project  @relation(fields: [projectId], references: [projectId], onDelete: Cascade)

  @@unique([projectId, key])
  @@map("project_secrets")
}

model Pipeline {
  name            String
  createdAt       DateTime            @default(now())
  description     String?
  isActive        Boolean             @default(true)
  pipelineYaml    String?
  projectId       String
  templateId      String?
  triggerBranches String[]
  triggerType     TriggerType         @default(MANUAL)
  updatedAt       DateTime            @updatedAt
  visualConfig    Json?
  pipelineId      String              @id @default(uuid())
  executions      PipelineExecution[]
  nodes           PipelineNode[]
  project         Project             @relation(fields: [projectId], references: [projectId], onDelete: Cascade)
  template        PipelineTemplate?   @relation(fields: [templateId], references: [templateId])

  @@index([projectId])
  @@map("pipelines")
}

model PipelineTemplate {
  name          String
  description   String?
  category      String?
  tags          String[]
  isPublic      Boolean    @default(false)
  isOfficial    Boolean    @default(false)
  pipelineYaml  String
  visualConfig  Json
  nodeConfig    Json
  dockerfile    String?
  dockerCompose String?
  buildSpec     Json?
  ecrImageUri   String?
  imageVersion  String?
  usageCount    Int        @default(0)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  creatorId     String
  templateId    String     @id @default(uuid())
  creator       User       @relation("TemplateCreator", fields: [creatorId], references: [userId])
  pipelines     Pipeline[]
  sharedWith    User[]     @relation("SharedTemplates")

  @@index([isPublic, category])
  @@map("pipeline_templates")
}

model PipelineNode {
  nodeId         String          @id @default(uuid())
  name           String
  type           NodeType
  order          Int
  position       Json?
  config         Json
  parentNodeIds  String[]
  childNodeIds   String[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  pipelineId     String
  clientNodeId   String
  nodeExecutions NodeExecution[]
  pipeline       Pipeline        @relation(fields: [pipelineId], references: [pipelineId], onDelete: Cascade)

  @@unique([pipelineId, clientNodeId])
  @@index([pipelineId, order])
  @@map("pipeline_nodes")
}

model PipelineExecution {
  executionId            String          @id @default(uuid())
  status                 ExecutionStatus @default(PENDING)
  triggerType            TriggerType
  branch                 String?
  commitSha              String?
  commitMessage          String?
  pipelineYaml           String
  dockerfile             String?
  dockerCompose          String?
  buildSpec              Json?
  codeBuildArn           String?
  codeBuildLogGroupName  String?
  codeBuildLogStreamName String?
  ecrImageUri            String?
  ecrImageTag            String?
  startedAt              DateTime?
  completedAt            DateTime?
  duration               Int?
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  pipelineId             String
  awsBuildId             String          @unique
  deployments            Deployment[]
  logs                   ExecutionLog[]
  nodeExecutions         NodeExecution[]
  pipeline               Pipeline        @relation(fields: [pipelineId], references: [pipelineId], onDelete: Cascade)

  @@index([pipelineId, status])
  @@index([awsBuildId])
  @@map("pipeline_executions")
}

model NodeExecution {
  status          ExecutionStatus   @default(PENDING)
  startedAt       DateTime?
  completedAt     DateTime?
  duration        Int?
  output          String?
  error           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  executionId     String
  nodeId          String
  nodeExecutionId String            @id @default(uuid())
  execution       PipelineExecution @relation(fields: [executionId], references: [executionId], onDelete: Cascade)
  node            PipelineNode      @relation(fields: [nodeId], references: [nodeId])

  @@index([executionId])
  @@map("node_executions")
}

model Deployment {
  status         DeploymentStatus   @default(PENDING)
  serverHost     String
  serverPort     Int                @default(22)
  deployPath     String?
  strategy       DeploymentStrategy @default(ROLLING)
  dockerImageUri String
  containerName  String?
  startedAt      DateTime?
  completedAt    DateTime?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  executionId    String
  deploymentId   String             @id @default(uuid())
  logs           DeploymentLog[]
  execution      PipelineExecution  @relation(fields: [executionId], references: [executionId], onDelete: Cascade)

  @@index([executionId])
  @@map("deployments")
}

model ExecutionLog {
  level       LogLevel          @default(INFO)
  message     String
  source      String?
  s3Bucket    String?
  s3Key       String?
  timestamp   DateTime          @default(now())
  executionId String
  logId       String            @id @default(uuid())
  execution   PipelineExecution @relation(fields: [executionId], references: [executionId], onDelete: Cascade)

  @@index([executionId, timestamp])
  @@map("execution_logs")
}

model DeploymentLog {
  level        LogLevel   @default(INFO)
  message      String
  source       String?
  s3Bucket     String?
  s3Key        String?
  timestamp    DateTime   @default(now())
  deploymentId String
  logId        String     @id @default(uuid())
  deployment   Deployment @relation(fields: [deploymentId], references: [deploymentId], onDelete: Cascade)

  @@index([deploymentId, timestamp])
  @@map("deployment_logs")
}

model PushEvent {
  pushEventId   String   @id @default(uuid())
  branch        String
  commitSha     String
  commitMessage String?
  pusherName    String?
  pushedAt      DateTime
  createdAt     DateTime @default(now())
  projectId     String
  project       Project  @relation(fields: [projectId], references: [projectId], onDelete: Cascade)

  @@index([projectId, pushedAt])
  @@index([branch])
  @@map("push_events")
}

enum TriggerType {
  MANUAL
  WEBHOOK
  SCHEDULE
  API
}

enum NodeType {
  BUILD
  TEST
  DEPLOY
  CUSTOM
}

enum ExecutionStatus {
  PENDING
  QUEUED
  RUNNING
  SUCCESS
  FAILED
  CANCELLED
  SKIPPED
}

enum DeploymentStatus {
  PENDING
  DEPLOYING
  SUCCESS
  FAILED
  ROLLED_BACK
}

enum DeploymentStrategy {
  ROLLING
  BLUE_GREEN
  CANARY
}

enum LogLevel {
  DEBUG
  INFO
  WARNING
  ERROR
  CRITICAL
}
